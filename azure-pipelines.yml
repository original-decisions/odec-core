trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'
  
steps:
- powershell: |
   Get-ChildItem Env:
   
   dotnet --info
  displayName: 'Env + dotnet info'

- powershell: |
   git clone https://github.com/original-decisions/ci-cd -v --progress;
   
   dir
  errorActionPreference: silentlyContinue
  workingDirectory: '$(Build.Repository.LocalPath)'
  displayName: 'clone ci scripts'

- task: PowerShell@2
  displayName: 'dotnet restore'
  inputs:
    targetType: ./
    filePath: 'ci-cd/Powershell/restore.ps1'
    workingDirectory: SystemExchange

- task: PowerShell@2
  displayName: 'dotnet build'
  inputs:
    targetType: ./
    filePath: 'ci-cd/Powershell/build.ps1'
    workingDirectory: SystemExchange

- powershell: |
   # You can write your powershell scripts inline here. 
   # You can also pass predefined and custom variables to this scripts using arguments
   
   ForEach ($path in (Get-Childitem **/**.csproj -Recurse)) {cd $path.Directory; dotnet test}
  workingDirectory: SystemExchange
  displayName: 'run tests'

- task: PowerShell@2
  displayName: pack
  inputs:
    targetType: ./
    filePath: 'ci-cd/Powershell/pack.ps1'
    workingDirectory: SystemExchange/src

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    Contents: |
     **/*.nupkg
     **/*test*.xml
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

- task: YodLabs.VariableTasks.AddTag.AddTag@0
  displayName: 'Add Tag(s) SysExchange Succeeded to build'
  inputs:
    tags: |
     SysExchange
     Succeeded

