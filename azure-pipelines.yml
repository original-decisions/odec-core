trigger:
- master/src/*

pool:
  vmImage: 'vs2017-win2016'
  

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true  # whether to fetch clean each time
  persistCredentials: true

- powershell: |
   Get-ChildItem Env:
   
   dotnet --info
  displayName: 'Env + dotnet info'
- task: gep13.chocolatey-azuredevops.chocolatey-azuredevops.ChocolateyCommand@0
  displayName: 'Chocolatey install'
  inputs:
    command: install
    installPackageId: docfx
    
- powershell: |
   git clone https://github.com/original-decisions/ci-cd -v --progress;

   Write-Host "$(pwd)";
   Write-Host "$($env:git_access_token)";
   Write-Host "CI Build $env:BUILD_BUILDNUMBER";
   #git config --global user.password "$(pwd)";
   dir;
  errorActionPreference: silentlyContinue
  workingDirectory: '$(Build.Repository.LocalPath)'
  displayName: 'clone ci scripts'

- task: PowerShell@2
  displayName: 'dotnet restore'
  inputs:
    targetType: filePath
    filePath: 'ci-cd/Powershell/restore.ps1'
    workingDirectory: src

- task: PowerShell@2
  displayName: 'dotnet build'
  inputs:
    targetType: filePath
    filePath: 'ci-cd/Powershell/build.ps1'
    workingDirectory: src

- powershell: |
   # You can write your powershell scripts inline here. 
   # You can also pass predefined and custom variables to this scripts using arguments
   
   ForEach ($path in (Get-Childitem **/**.csproj -Recurse)) {cd $path.Directory; dotnet test}
  workingDirectory: tests
  displayName: 'run tests'
- powershell: |
   # You can write your powershell scripts inline here. 
   # You can also pass predefined and custom variables to this scripts using arguments
   
   docfx doc_gen/docfx.json;
   dir;
  workingDirectory: ''
  displayName: 'prepare docs'
- powershell: |
   git config --global credential.helper store
   Add-Content "$HOME\.git-credentials" "https://$($env:git_access_token):x-oauth-basic@github.com`n"
   git config --global user.email "pirmosk@gmail.com"
   git config --global user.name "CI bot"
   git subtree add --prefix docs https://github.com/original-decisions/odec-core.git gh-pages;
   Write-Host "add subtree passed";
   git subtree pull --prefix docs https://github.com/original-decisions/odec-core.git gh-pages;
   git add docs/* -f;
   git commit -m "CI Build $env:BUILD_BUILDNUMBER";
   Write-Host "add + commite passed";
   git subtree push --prefix docs https://github.com/original-decisions/odec-core.git gh-pages;
   Write-Host "push subtree passed";
  workingDirectory: ''
  displayName: 'push the docs!'
- task: PowerShell@2
  displayName: pack
  inputs:
    targetType: filePath
    filePath: 'ci-cd/Powershell/pack.ps1'
    workingDirectory: src

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    Contents: |
     docs/**
     **/*.nupkg
     **/*test*.xml
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

- task: YodLabs.VariableTasks.AddTag.AddTag@0
  displayName: 'Add Tag(s) SysExchange Succeeded to build'
  inputs:
    tags: |
     Core
     Succeeded

